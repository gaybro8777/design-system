// USAJOBS Utilities

@mixin hide() {
  position: absolute !important;
  margin: -1px !important;
  border: 0 !important;
  padding: 0 !important;
  width: 1px !important;
  height: 1px !important;
  overflow: hidden !important;
  clip: rect(0 0 0 0) !important;
}

@mixin makeCircle($size, $border: none, $bg-color: none, $color: $color-white) {
  display: inline-block;
  width: $size;
  height: $size;
  line-height: $size;
  border-radius: 50%;
  color: $color;
  background-color: $bg-color;
  box-shadow: inset 0 0 0 2px $border;
}

@mixin makeCloseButton($size: 35px) {
  position: absolute;
  top: -#{$size-default};
  right: -#{$size-default};
  margin: 0;
  padding: 0;
  @include makeCircle($size);
  background-color: $color-gray-light;
  text-decoration: none;

  &:after {
    position: relative;
    width: rem(10px);
    height: rem(10px);
    margin-left: -#{rem(2px)};
    @include fa-icon();
    content: $fa-var-times;
    color: $color-white;
    // Safari puts the icon slightly too low, Chrome slightly too high
    // line-height corrects the issue in Chrome but makes it way too low in Safari
    // line-height: $size;
  }

  &:hover {
    background-color: $color-gray-dark;
  }
}

@mixin unstyledList() {
  display: block;
  margin: 0;
  padding: 0;
  list-style-type: none;

  li {
    display: list-item;
    margin: 0;

    &:before {
      display: none;
    }

    &:after {
      display: none;
    }
  }
}

// From https://gist.github.com/johnkoht/6405117
// Converted from sass to scss
// Create the grid for a given size
// This will loop over the number of columns and create a css class
// for each. If it's the last gride size, then let's not add a float
@mixin grid-core($size) {
  @for $i from 1 through $grid-columns {
    .col-#{$size}-#{$i} {
      // Ignore float for the largest grid size
      @if $i < $grid-columns {
        float: left;
      }
      @include span-columns($i);
    }
    // If it's not the screen-xs, then let's add push and pull helper classes
    @if $size != "xs" {
      .col-#{$size}-push-#{$i} {
        left: flex-grid($i, $grid-columns) + flex-gutter($grid-columns);
      }
      .col-#{$size}-pull-#{$i} {
        right: flex-grid($i, $grid-columns) + flex-gutter($grid-columns);
      }
    }
  }
}
